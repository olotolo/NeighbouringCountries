@page "/"

<PageTitle>Index</PageTitle>

<h1 class="textCenter">Country Guesser</h1><br/>
<h2 class="textCenter">@GivenCountry.GivenCountry</h2>

<input id="countryInput" @bind="ValidateCountry" @bind:event="oninput"  placeholder="Type Bordering Countrys here"/>
<h2 class="textCenter">Remaining: @NeighbourCountriesRemainingCount </h2>
<h3 class="textCenter">Guessed: <span class="textCenter" style="color:green;">@CorrectGuesses</span></h3>

    <button class="buttonCenter" @onclick="CreateNewCountry">New Country</button><br/>
    <button class="buttonCenter" @onclick="ShowSolution">Solution</button>
<h3 id="Solution">@BorderingCountriesSolution</h3>


@code {
    //Inputbox
    private string? PlayerInputString { get; set; }
    private string? BorderingCountriesSolution = " ";

    //List of all Countrys and their Neighbours
    private static AllCountrysList allCountryList = new AllCountrysList();



    // Selects a Random Country from the Countrys List
    private static Random rnd = new Random();
    private static int randomNumber;
    private static Country GivenCountry;
    private static List<string> NeighbourCountriesRemaining;
    private static int NeighbourCountriesRemainingCount;

    private static string CorrectGuesses = "";

    // Called when Page is loaded
    protected override async Task OnInitializedAsync()
    {
        CreateNewCountry();
    }

    // Called each time the user Types into the input box
    private string ValidateCountry
    {
        get { return PlayerInputString; }
        set
        {
            PlayerInputString = value;
            Check();
        }
    }

    // Check if the Country is contained in the Neighbour list
    private void Check()
    {
        for (int i = 0; i < NeighbourCountriesRemaining.Count; i++)
        {
            if(string.Equals(PlayerInputString, NeighbourCountriesRemaining[i], StringComparison.OrdinalIgnoreCase))
            {
                CorrectGuesses = CorrectGuesses + NeighbourCountriesRemaining[i] + ", ";
                PlayerInputString = String.Empty;
                NeighbourCountriesRemainingCount--;
                NeighbourCountriesRemaining.RemoveAt(i);
                // When the Player has guessed all Countrys a new one will be given
                if(NeighbourCountriesRemainingCount == 0)
                {
                    Console.WriteLine("All Countries have been guessed!");
                    CreateNewCountry();
                }
            }
        }
    }

    private void CreateNewCountry()
    {
        BorderingCountriesSolution = " ";
        //Make sure that the same Country is not chosen twice in a row
        rnd = new Random();
        int newRandomNumber = rnd.Next(allCountryList.countryBordersGerman.Count);
        while (randomNumber == newRandomNumber)
        {
            newRandomNumber = rnd.Next(allCountryList.countryBordersGerman.Count);
        }

        // Workaround, currently creates new class instance because it always passes references not clones and deletes entries...
        allCountryList = new AllCountrysList();


        randomNumber = newRandomNumber;
        var copy = new KeyValuePair<string, List<string>>(allCountryList.countryBordersGerman.ElementAt(randomNumber).Key, allCountryList.countryBordersGerman.ElementAt(randomNumber).Value);


        GivenCountry = new Country(allCountryList.countryBordersGerman.ElementAt(randomNumber).Key, allCountryList.countryBordersGerman.ElementAt(randomNumber).Value);
        NeighbourCountriesRemaining = copy.Value;
        NeighbourCountriesRemainingCount = NeighbourCountriesRemaining.Count;
        CorrectGuesses = "";
    }

    private void ShowSolution()
    {
        BorderingCountriesSolution = "";
        for(int i = 0; i < GivenCountry.NeighbouringCountries.Count; i++)
        {
            BorderingCountriesSolution += GivenCountry.NeighbouringCountries[i] + ", ";
        }
    }

}

